/*
 * Copyright 2019 Dmitry Korotych
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}.RELEASE"
	}
}

plugins {
	id 'java'
//	id 'com.github.hierynomus.license' version '0.15.0'
}

apply plugin: 'org.springframework.boot'

group = 'com.github.dkorotych.heroku.spring.boot.admin'
version = "${spring_boot_admin_version}-SNAPSHOT"
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

ext {
	set('springBootAdminVersion', "${spring_boot_admin_version}")
}

dependencies {
	compile 'org.springframework.boot:spring-boot-starter-security'
	compile 'de.codecentric:spring-boot-admin-starter-server'
	runtimeOnly "de.codecentric:spring-boot-admin-server-ui-login:${spring_boot_admin_version}"

	testCompile 'org.springframework.boot:spring-boot-starter-test'
	testCompile 'org.springframework.security:spring-security-test'
}

dependencyManagement {
	imports {
		mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
	}
}

jar {
	archiveFileName = 'admin-console.jar'
}

//license {
//	header project.file('config/license-header.txt')
//	ext.year = Calendar.getInstance().get(Calendar.YEAR)
//	ext.developers = 'Dmitry Korotych'
//	skipExistingHeaders true
//	strictCheck true
//}

task replaceVersion {
	def file = file('README.adoc')
	def content = file.text
	def versionPattern = /\d+(?:\.\d+)+/
	content = content.replaceAll(":version: ${versionPattern}", ":version: ${spring_boot_admin_version}")
	file.text = content
}

task stage(dependsOn: [bootRepackage])
