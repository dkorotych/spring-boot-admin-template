/*
 * Copyright 2019 Dmitry Korotych
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.1'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'com.github.hierynomus.license' version '0.16.1'
	id "com.github.ben-manes.versions" version "0.47.0"
	id "org.openrewrite.rewrite" version "6.1.6"
}

ext {
	set('springBootAdminVersion', "3.1.0")
}

group = 'com.github.dkorotych.heroku.spring.boot.admin'
version = "${springBootAdminVersion}-SNAPSHOT"
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
    compileOnly "com.sun.xml.ws:jaxws-rt:4.0.1"
    compileOnly "org.glassfish.jaxb:jaxb-runtime:4.0.3"

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'de.codecentric:spring-boot-admin-starter-server'

	testImplementation "com.sun.xml.ws:jaxws-rt:4.0.1"
	testImplementation "org.glassfish.jaxb:jaxb-runtime:4.0.3"

	rewrite(platform("org.openrewrite.recipe:rewrite-recipe-bom:2.0.5"))
	rewrite("org.glassfish.jaxb:jaxb-runtime:4.0.3")
    rewrite("org.openrewrite.recipe:rewrite-spring")
	rewrite("org.openrewrite:rewrite-gradle")
	rewrite("org.openrewrite.recipe:rewrite-github-actions")
}

dependencyManagement {
	imports {
		mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
	}
}

bootJar {
	archiveFileName = 'admin-console.jar'
}

license {
	header project.file('config/license-header.txt')
	ext.year = Calendar.getInstance().get(Calendar.YEAR)
	ext.developers = 'Dmitry Korotych'
	strictCheck true
	skipExistingHeaders true
}

rewrite {
	configFile = project.getRootProject().file("config/rewrite.yml")
	activeRecipe("com.github.dkorotych.heroku.spring.boot.admin.Template")
}

tasks.register("replaceVersion").configure {
	def file = file('README.adoc')
	def content = file.text
	def versionPattern = /\d+(?:\.\d+)+/
	content = content.replaceAll(":version: ${versionPattern}", ":version: ${springBootAdminVersion}")
	file.text = content
}

tasks.register("stage").configure {
	dependsOn(bootJar)
}

dependencyUpdates {
	revision = "release"
	gradleReleaseChannel = "release"
}
