/*
 * Copyright 2019 Dmitry Korotych
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.github.hierynomus.license' version '0.16.1'
	id "com.github.ben-manes.versions" version "0.52.0"
	id "org.openrewrite.rewrite" version "7.15.0"
}

ext {
	set('springBootAdminVersion', "3.5.2")
}

group = 'com.github.dkorotych.heroku.spring.boot.admin'
version = "${springBootAdminVersion}-SNAPSHOT"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

// Performance optimizations
tasks.withType(JavaCompile).configureEach {
	options.compilerArgs += [
		'-Xlint:unchecked',
		'-Xlint:deprecation',
		'--enable-preview'
	]
	options.encoding = 'UTF-8'
	options.incremental = true
}

// JVM optimization for runtime
tasks.withType(JavaExec).configureEach {
	jvmArgs += [
		'-XX:+UseG1GC',
		'-XX:+UseStringDeduplication',
		'-XX:+OptimizeStringConcat',
		'-XX:+UseCompressedOops',
		'-XX:+UseCompressedClassPointers',
		'-XX:+TieredCompilation',
		'-XX:TieredStopAtLevel=1',
		'-Djava.security.egd=file:/dev/./urandom',
		'-Dspring.jmx.enabled=false',
		'-Dspring.backgroundpreinitializer.ignore=true'
	]
}

// Boot JAR optimization
bootJar {
	archiveFileName = 'admin-console.jar'
	optimizedLaunch = true
	layered {
		enabled = true
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'de.codecentric:spring-boot-admin-starter-server'
	
	// Performance monitoring and metrics
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	
	// Optional: Add caching for better performance
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'com.github.ben-manes.caffeine:caffeine'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	rewrite(platform("org.openrewrite.recipe:rewrite-recipe-bom:3.14.0"))
    rewrite("org.openrewrite.recipe:rewrite-spring")
	rewrite("org.openrewrite:rewrite-gradle")
	rewrite("org.openrewrite.recipe:rewrite-github-actions")
}

dependencyManagement {
	imports {
		mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
	}
}



license {
	header = project.file('config/license-header.txt')
	ext.year = Calendar.getInstance().get(Calendar.YEAR)
	ext.developers = 'Dmitry Korotych'
	strictCheck = true
	skipExistingHeaders = true
}

rewrite {
	configFile = project.getRootProject().file("config/rewrite.yml")
	activeRecipe("com.github.dkorotych.heroku.spring.boot.admin.Template")
}

tasks.register("replaceVersion").configure {
	def file = file('README.adoc')
	def content = file.text
	def versionPattern = /\d+(?:\.\d+)+/
	content = content.replaceAll(":version: ${versionPattern}", ":version: ${springBootAdminVersion}")
	file.text = content
}

tasks.register("stage").configure {
	dependsOn(bootJar)
}

dependencyUpdates {
	revision = "release"
	gradleReleaseChannel = "release"
	checkForGradleUpdate = true
	rejectVersionIf {
		def version = it.candidate.version
		version.contains("alpha")
				|| version.contains("beta")
				|| version.matches(/.+-M\d+$/)
				|| version.matches(/.+-RC\d+$/)
	}
}
tasks.withType(Test).configureEach {
    useJUnitPlatform()
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    forkEvery = 100
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

// Build performance optimizations
gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.fork = true
        options.forkOptions.jvmArgs += ['-Xmx2g']
    }
}

// Parallel execution
tasks.withType(AbstractCompile).configureEach {
    options.fork = true
    options.forkOptions.jvmArgs += ['-Xmx2g']
}

// Dependency resolution optimization
configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
        cacheDynamicVersionsFor 0, 'seconds'
        force 'org.springframework:spring-core:6.1.0'
        force 'org.springframework:spring-web:6.1.0'
        force 'org.springframework:spring-webmvc:6.1.0'
    }
}
